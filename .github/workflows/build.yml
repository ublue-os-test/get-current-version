name: build-ublue
on:
  push:
    branches:
      - main
  workflow_dispatch:
env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  main:
    name: main
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        image_name:
          - silverblue
          - kinoite
        major_version: [39]
    steps:
      # Checkout push-to-registry action GitHub repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@v4

      - name: Matrix Variables
        shell: bash
        run: |
          echo "SOURCE_IMAGE=${{ matrix.image_name }}" >> $GITHUB_ENV
          echo "SOURCE_ORG=fedora-ostree-desktops" >> $GITHUB_ENV
          export IMAGE_FLAVOR=main
          echo "IMAGE_NAME=${{ matrix.image_name }}-${IMAGE_FLAVOR}" >> $GITHUB_ENV

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          VARIANT="${{ matrix.major_version }}"

          COMMIT_TAGS=()
          BUILD_TAGS=()

          # Have tags for tracking builds during pull request
          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("pr-${{ github.event.number }}-${VARIANT}")
          COMMIT_TAGS+=("${SHA_SHORT}-${VARIANT}")

          if [[ "${{ matrix.is_latest_version }}" == "true" ]] && \
             [[ "${{ matrix.is_stable_version }}" == "true" ]]; then
              COMMIT_TAGS+=("pr-${{ github.event.number }}")
              COMMIT_TAGS+=("${SHA_SHORT}")
          fi

          BUILD_TAGS=("${VARIANT}")

          # Append matching timestamp tags to keep a version history
          for TAG in "${BUILD_TAGS[@]}"; do
              BUILD_TAGS+=("${TAG}-${TIMESTAMP}")
          done

          if [[ "${{ matrix.is_latest_version }}" == "true" ]] && \
             [[ "${{ matrix.is_stable_version }}" == "true" ]]; then
              BUILD_TAGS+=("${TIMESTAMP}")
              BUILD_TAGS+=("latest")
          elif [[ "${{ matrix.is_gts_version }}" == "true" ]]; then
              BUILD_TAGS+=("gts-${TIMESTAMP}")
              BUILD_TAGS+=("gts")
          fi

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done
              alias_tags=("${COMMIT_TAGS[@]}")
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi

          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done

          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

      - name: Get current version - typical
        id: labels-typical
        run: |
          ver=$(skopeo inspect docker://quay.io/${{ env.SOURCE_ORG }}/${{ env.SOURCE_IMAGE }}:${{ matrix.major_version }} | jq -r '.Labels["org.opencontainers.image.version"]')
          echo "VERSION_TYP=$ver" >> $GITHUB_OUTPUT

      - name: Get current version - fail
        id: labels-fail
        run: |
          ver=$(skopeo inspect docker://quay.io/${{ env.SOURCE_ORG }}/${{ env.SOURCE_IMAGE }}-foo:${{ matrix.major_version }} | jq -r '.Labels["org.opencontainers.image.version"]')
          echo "VERSION_FAIL=$ver" >> $GITHUB_OUTPUT

      - name: Get current version - fail2
        id: labels-fail2
        run: |
          ver=$(skopeo inspect docker://quay.io/${{ env.SOURCE_ORG }}/${{ env.SOURCE_IMAGE }}:${{ matrix.major_version }} | jq -r '.Labels["org.opencontainers.image.version-foobar"]')
          echo "VERSION_FAIL2=$ver" >> $GITHUB_OUTPUT

      - name: Echo outputs
        run: |
          echo "${{ toJSON(steps.labels-typical.outputs) }}"
          echo "${{ toJSON(steps.labels-fail.outputs) }}"
          echo "${{ toJSON(steps.labels-fail2.outputs) }}"

  check:
    name: Check all builds successful
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    needs: [main]
    steps:
      - name: Exit on failure
        if: ${{ needs.main.result == 'failure' }}
        shell: bash
        run: exit 1
      - name: Exit
        shell: bash
        run: exit 0